<head>
  <title>VueChat</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=1.0, minimum-scale=1.0, maximum-scale=1.0">
  <link rel="stylesheet" href="css/watch-bootstrap.css">
  <link rel="stylesheet" href="css/chat-bubble.css">
  <link rel="stylesheet" href="css/vue-chat.css">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
  <script src="js/jquery.min.js"></script>
  <script src="js/bootstrap.js"></script>
  <script src="js/vue.js"></script>
  <script src="js/moment.min.js"></script>
</head>
<script>

Vue.component("app-chat-entry", {
  props: ['entry', 'lastMessage'],
  template: `<div class="chat-entry">
                <div class="row">
                  <div class="col-xs-2">
                    <div class="chat-entry-profile-pic-container">
                      <img class="chat-entry-profile-pic" src="img/default-profile-pic.png">
                    </div>
                  </div>
                  <div class="col-xs-10">
                    <span class="chat-entry-name">
                      {{entry.name}}
                    </span>
                    <br/>
                    <span class="chat-entry-last-message">
                      {{ lastMessage | truncate('30', '...') }}
                    </span>
                  </div>
                </div>
            </div>`,
  filters: {
    truncate: function(text, stop, clamp){
      return text.slice(0, stop) + (stop < text.length ? clamp || '...' : '');
    },
  }
});

Vue.component("app-chat-bubble", {
  props: ['message'],
  template: `<div>
              <div class="chat-bubble talk-bubble tri-right round">
                <div class="talktext">
                  <div class="chat-bubble-author">{{message.author}}</div>
                  <p class="chat-bubble-content">{{message.content}}</p>
                  <div class="chat-bubble-timestamp">{{message.timestamp | moment}}</div>
                </div>
              </div>
            </div>`,
  methods: {
    moment: function(){
      return moment();
    },
  },
  filters: {
    moment: function (date) {
      return moment(date).format('D MMM YYYY, HH:mm:ss');
    }
  },
})

</script>

<body>
  <div class="container-fluid">
    <div id="app" class="row">
      <div class="loading">
        <div class="loading-spinner">
          <h1><span class="fa fa-3x fa-circle-o-notch fa-spin"></span></h1>
        </div>
      </div>
      <div class="col-sm-3 hidden-xs sidebar">
        <!-- sidebar -->
        <div class="row bg-primary">
          <div class="col-xs-12">
            <div class="app-toolbar">
              <span class="app-title">{{ currentSidebarTitle }}</sp>
            </div>
          </div>
        </div>
        <div class="row">
          <div v-if="currentSidebarViewId == 1" class="col-xs-12 sidebar-view">
            <div class="row">
              <app-chat-entry 
                v-for="entry in entries" 
                :entry="entry"
                :last-message="allMessages[entry.id][allMessages[entry.id].length-1].content"
                :key="entry.id"
                @click.native="setEntryId(entry.id)">
              </app-chat-entry>
            </div>
          </div>
          
          <div v-if="currentSidebarViewId == 2" class="col-xs-12 sidebar-view">
            <div class="row">
              <div class="jumbotron">
                Your friends list will appear here.
              </div>
            </div>
          </div>
          
          <div v-if="currentSidebarViewId == 3" class="col-xs-12 sidebar-view">
            <div class="row">
              <div class="jumbotron">
                You can add new friends here.
              </div>
            </div>
          </div>
        </div>
        
        <div v-if="loggedIn" class="nav-buttons row">
          <div class="col-xs-3 nav-button bg-primary" @click="setSidebarView(1)">
            <i class="fa fa-fw fa-comments"></i><br/><span class="nav-text">Chats</span>
          </div>
          <div class="col-xs-3 nav-button bg-primary" @click="setSidebarView(2)">
            <i class="fa fa-fw fa-users"></i><br/><span class="nav-text">Friends</span>
          </div>
          <div class="col-xs-3 nav-button bg-primary" @click="setSidebarView(3)">
            <i class="fa fa-fw fa-user-plus"></i><br/><span class="nav-text">Add</span>
          </div>
          <div class="col-xs-3 nav-button bg-primary" @click="logout()">
            <i class="fa fa-fw fa-sign-out"></i><br/><span class="nav-text">Logout</span>
          </div>
        </div>

      </div>
      <div class="visible-xs sidebar sidebar-mobile bg-primary">
        <!-- sidebar mobile-->
        <div class="row bg-primary">
          <div class="col-xs-12">
            <div class="app-toolbar row">
              <div class="col-xs-9">
                <span class="app-title">{{ currentSidebarTitle }}</span>
              </div>
              <div class="col-xs-3">
                <div class="pull-right">
                  <span class="btn-group">
                    <button class="app-toolbar-btn btn btn-primary visible-xs" @click="closeMobileSidebar"><i class="fa fa-times"></i></button>
                  </span>
                </div>
                <div class="clearfix"></div>
              </div>
            </div>
          </div>
        </div>
        <div class="row">
          <div v-if="currentSidebarViewId == 1" class="col-xs-12 sidebar-view">
            <div class="row">
              <app-chat-entry 
                v-for="entry in entries" 
                :entry="entry"
                :last-message="allMessages[entry.id][allMessages[entry.id].length-1].content"
                :key="entry.id"
                @click.native="setEntryId(entry.id)">
              </app-chat-entry>
            </div>
          </div>

          <div v-if="currentSidebarViewId == 2" class="col-xs-12 sidebar-view">
            <div class="row">
              <div class="jumbotron">
                Your friends list will appear here.
              </div>
            </div>
          </div>
          
          <div v-if="currentSidebarViewId == 3" class="col-xs-12 sidebar-view">
            <div class="row">
              <div class="jumbotron">
                You can add new friends here.
              </div>
            </div>
          </div>
          
        </div>
        
        <div v-if="loggedIn" class="nav-buttons row">
          <div class="col-xs-3 nav-button bg-primary" @click="setSidebarView(1)">
            <i class="fa fa-fw fa-comments"></i><br/><span class="nav-text">Chats</span>
          </div>
          <div class="col-xs-3 nav-button bg-primary" @click="setSidebarView(2)">
            <i class="fa fa-fw fa-users"></i><br/><span class="nav-text">Friends</span>
          </div>
          <div class="col-xs-3 nav-button bg-primary" @click="setSidebarView(3)">
            <i class="fa fa-fw fa-user-plus"></i><br/><span class="nav-text">Add</span>
          </div>
          <div class="col-xs-3 nav-button bg-primary" @click="logout()">
            <i class="fa fa-fw fa-sign-out"></i><br/><span class="nav-text">Logout</span>
          </div>
        </div>

      </div>

      <div class="col-sm-9 col-xs-12 content">
        <!-- chat header -->
        <div v-cloak v-if="currentEntryId" class="row bg-primary">
          <div class="col-xs-12">
            <div class="bg-primary chat-toolbar row">
              <div class="col-xs-9">
                <span class="chat-title">{{ currentChatName | truncate('20', '...')}}</span>  
              </div>
              <!-- sidebar mobile toggle -->
              <div class="col-xs-3">
                <div class="pull-right">
                  <span class="btn-group">
                    <button class="chat-toolbar-btn btn btn-primary visible-xs" @click="openMobileSidebar"><i class="fa fa-bars"></i></button>
                  </span>
                </div>
                <div class="clearfix"></div>
              </div>
            </div>
          </div>
        </div>
        <div v-else class="row bg-primary">
          <div class="col-xs-12">
            <div class="bg-primary chat-toolbar row">
              <div class="col-xs-9">
                <span class="chat-title">VueChat</span>  
              </div>
              <!-- sidebar mobile toggle -->
              <div class="col-xs-3">
                <div class="pull-right">
                  <span class="btn-group">
                    <button class="chat-toolbar-btn btn btn-primary visible-xs" @click="openMobileSidebar"><i class="fa fa-bars"></i></button>
                  </span>
                </div>
                <div class="clearfix"></div>
              </div>
            </div>
          </div>
        </div>

        <!-- chat window -->
        <div class="chat-window">
          <div class="col-xs-12" v-if="!currentEntryId">
            <br/>
            <div class="jumbotron">
              <center>
                This is still a prototype. No actual chat is being recorded yet.
              </center>
            </div>
          </div>
          <app-chat-bubble 
            v-for="message in messages"
            :class="{
                      'right-bubble': message.author == 'user',
                      'left-bubble': message.author !== 'user',
                      // 'left-in': message.author !== 'user',
                      // 'right-in': message.author == 'user'
                    }"
            :message="message"
            :key="message.id">
          </app-chat-bubble>
        </div>

        <div class="text-box" v-if="currentEntryId">
          <form class="form-group"
            action="#"
            method="POST" 
            @submit.prevent="sendMessage">
            <div class="input-group">
              <input type="text" class="form-control" v-model="textBox">

              <span class="input-group-btn">
                <button :disabled="isTextBoxEmpty" class="btn btn-info">
                  <i class="fa fa-paper-plane"></i></button>
              </span>
            </div>
          </form>
        </div>

      </div>
    </div>
  </div>

</body>

<script src="https://unpkg.com/axios@0.12.0/dist/axios.min.js"></script>
<script src="https://unpkg.com/lodash@4.13.1/lodash.min.js"></script>
<script>

var app = new Vue({
  el: "#app",
  data: {
    error: "",
    currentEntryId: 0,
    currentSidebarViewId: 1, // 1 is the chats view
    entries: {},
    allMessages: {},
    textBox: "",
    loggedIn: true,
  },
  computed: {
    messages: function(){
      return this.allMessages[this.currentEntryId];
    },
    currentChatName: function(){
      return this.entries[this.currentEntryId].name;
    },
    isTextBoxEmpty: function(){
      return this.textBox.length <= 0;
    },
    currentSidebarTitle: function(){
      switch(this.currentSidebarViewId){
        case 1: return "Chats"; break;
        case 2: return "Friends"; break;
        case 3: return "Add Friend"; break;
        default: break;
      }
    },
  },
  methods: {
    moment: function(){
      return moment();
    },
    setEntryId: function(id){
      // console.log("clicked on entry with id:", id);
      this.currentEntryId = id;

      /* hide sidebar in mobile UI */
      var container = this.$el.querySelector(".sidebar-mobile");
      container.style.right = "100%";
      
      Vue.nextTick(function () { 
          // we need to use nextTick() to ensure we only scroll after the DOM finished updating
          var container = app.$el.querySelector(".chat-window");
          container.scrollTop = container.scrollHeight;
      });
    },
    setSidebarView: function(id){
      this.currentSidebarViewId = id;
    },
    logout: function(){
      window.location.href = "/chat-app/login";
    },
    callAlert: function(message){
      alert(message);
    },
    sendMessage: function(){
      var msg = {};
      msg.content = this.textBox;
      msg.author = "user";
      msg.id = uuidv4();
      msg.timestamp = Date.now();
      var data = {};
      data.message = msg;
      data.entryId = this.currentEntryId;
      axios.post('/chat-app/sendMessage', data)
      .then(function (response) {
        console.log(response);
        app.allMessages[app.currentEntryId].push(msg);
        app.textBox = "";

        Vue.nextTick(function () { 
          // we need to use nextTick() to ensure we only scroll after the DOM finished updating
          var container = app.$el.querySelector(".chat-window");
          container.scrollTop = container.scrollHeight;
        });
      })
      .catch(function (error) {
        console.log(error);
      });

      
    },
    openMobileSidebar: function(){
      var container = this.$el.querySelector(".sidebar-mobile");
      container.style.right = "0%";
    },
    closeMobileSidebar: function(){
      var container = this.$el.querySelector(".sidebar-mobile");
      container.style.right = "100%";
    },
    addMessage: function(event){
      this.message += event.key;
    }
  },
  filters: {
    uppercase: function(value){
      return value.toUpperCase();
    },
    moment: function (date) {
      return moment(date).format('D MMM YYYY, h:mm');
    },
    truncate: function(text, stop, clamp){
      return text.slice(0, stop) + (stop < text.length ? clamp || '...' : '');
    },
  },
  watch: {
    currentEntryId: function(newId, oldId){
      this.messages = this.allMessages[newId];
    }
  },

  created: function(){
    // this happen first
    console.log("app created");
  },
  mounted: function(){
    // then this happens
    console.log("app mounted");
    
    axios.get('/chat-app/initialData')
      .then(function (response) {
        app.entries = response.data.entries;
        app.allMessages = response.data.allMessages;
        
        // fadeout the loading spinner
        var container = app.$el.querySelector(".loading");
        var loader = app.$el.querySelector(".loading-spinner");
        container.style.opacity = 0;
        loader.style.opacity = 0;
        container.style.display = "none";
        loader.style.display = "none";

      })
      .catch(function (error) {
        app.error = 'Error! Could not reach the API. ' + error;

        var container = app.$el.querySelector(".loading");
        var loader = app.$el.querySelector(".loading-spinner");
        loader.innerHTML = "Error initializing the web-app! Please reload the web-app :(";
      });
  },
  updated: function(){
    // this happens whenever a DOM update occurs
    console.log("app updated");
  },
  destroyed: function(){
    //this happens when this.$destroy() is called
    console.log("app destroyed");
  }
});

function uuidv4() {
  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
  )
}

</script>

<!--<script>
var watchExampleVM = new Vue({
  el: '#watch-example',
  data: {
    question: '',
    answer: 'I cannot give you an answer until you ask a question!'
  },
  watch: {
    // whenever question changes, this function will run
    question: function (newQuestion) {
      this.answer = 'Waiting for you to stop typing...'
      this.getAnswer()
    }
  },
  methods: {
    // _.debounce is a function provided by lodash to limit how
    // often a particularly expensive operation can be run.
    // In this case, we want to limit how often we access
    // yesno.wtf/api, waiting until the user has completely
    // finished typing before making the ajax request. To learn
    // more about the _.debounce function (and its cousin
    // _.throttle), visit: https://lodash.com/docs#debounce
    getAnswer: _.debounce(
      function () {
        if (this.question.indexOf('?') === -1) {
          this.answer = 'Questions usually contain a question mark. ;-)'
          return
        }
        this.answer = 'Thinking...'
        var vm = this
        axios.get('https://yesno.wtf/api')
          .then(function (response) {
            vm.answer = _.capitalize(response.data.answer)
            vm.imageUrl = response.data.image
          })
          .catch(function (error) {
            vm.answer = 'Error! Could not reach the API. ' + error
          })
      },
      // This is the number of milliseconds we wait for the
      // user to stop typing.
      500
    )
  }
})
</script>-->